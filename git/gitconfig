# vim: set ft=sh et sw=2 sts=2 ts=2:
# set your user tokens as enivornment variables, such as ~/.secrets
# See the README for examples.
[color]
  ui = true
  status = auto
  interactive = auto
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[alias]
  
  # add
  a = add                           # add
  chunkyadd = add --patch           # stage commits chunk by chunk

  # branch
  b = branch -v                     # branch (verbose)

  # commit
  c = commit -m                     # commit with message
  ca = commit -am                   # commit all with message
  ci = commit                       # commit
  amend = commit --amend            # ammend your last commit
  ammend = commit --amend           # ammend your last commit
  cavm = commit -avm
  caa = commit -a --amend

  # config
  conf = config --global -e

  # checkout
  co = checkout                     # checkout
  nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")

  # cherry-pick
  cp = cherry-pick -x               # grab a change from a branch

  # diff
  d = diff                          # diff unstaged changes
  dc = diff --cached                # diff staged changes
  last = diff HEAD^                 # diff last committed change
  dw = diff --word-diff

  # log
  changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
  short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  changelog = log --pretty=format:\" * %s\"
  shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

  ll = log --decorate --graph --date=short
  lol = log --graph --decorate --pretty=oneline --abbrev-commit
  lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
  lfile = log --graph --decorate --pretty=oneline --abbrev-commit --follow 
  l5 = log --graph --decorate --pretty=oneline --abbrev-commit --all -5
  l = log --graph --decorate --pretty=oneline --abbrev-commit --all --first-parent
  ls = ls-files
  ldiff = log --stat
  lg = log -p

  # pull
  pl = pull                         # pull
  pr = pull --rebase

  # push
  ps = push                         # push
  puher = push heroku production:master
  pustab = push hub stable

  # rebase
  rc = rebase --continue            # continue rebase
  rs = rebase --skip                # skip rebase

  ri = rebase -i origin/master
  stable =  rebase master stable

  # remote
  r = remote -v                     # show remotes (verbose)
  ru = remote update

  # reset
  unstage = reset HEAD              # remove files from index (tracking)
  uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
  filelog = log -u                  # show changes to a file
  mt = mergetool                    # fire up the merge tool

  mergeabort = reset --merge HEAD^

  # stash
  ss = stash                        # stash changes
  sl = stash list                   # list stashes
  sa = stash apply                  # apply stash (restore changes)
  sd = stash drop                   # drop stashes (destory changes)

  # status
  st="status -sb"

  # tag
  t = tag -n                        # show tags with <n> lines of each tag message

  # svn helpers
  svnr = svn rebase
  svnd = svn dcommit
  svnl = svn log --oneline --show-commit
  svnup = svn fetch --parent
  dc = svn dcommit

[format]
  pretty = "format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset"
[merge]
  summary = true
  verbosity = 1
[apply]
  whitespace = nowarn
[branch]
  autosetuprebase=always
[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
  default = tracking
[core]
  autocrlf = false
  editor = vim
  excludesfile = ~/.yadr/gitignore_global
[advice]
  statusHints = true
[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
  mnemonicprefix = true
[rerere]
  # Remember my merges
  # http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
  enabled = true
